@using iClassic.Helper;
@using iClassic.Models;
@model Customer

@{
    var listProductType = ViewBag.ProductTypeList as IQueryable<ProductType>;
}
<div class="row">
    <div class="col-md-12">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.BranchId)
        <div class="form-group">
            @Html.LabelFor(model => model.TenKH)
            @Html.EditorFor(model => model.TenKH, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TenKH, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SDT)
            @Html.EditorFor(model => model.SDT, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SDT, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Address)
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Group)
            <select name="Group" class="form-control">
                @foreach (var item in Constant.CustomerGroup)
                {
                    <option value="@item.Key" @(item.Key == Model.Group ? "selected" : "")>@item.Value</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.Group, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.KenhQC)
            <select name="KenhQC" class="form-control">
                @foreach (var item in Constant.ListKenhQuangCao)
                {
                    <option value="@item.Key" @(item.Key == Model.KenhQC ? "selected" : "")>@item.Value</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.KenhQC, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Note)
            @Html.TextAreaFor(model => model.Note, new { @class = "form-control", rows = "5" })
            @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
        </div>
        @*<div class="form-group">
                @Html.LabelFor(model => model.DangNguoi)
                @Html.TextAreaFor(model => model.DangNguoi, new { @class = "form-control", rows = "5" })
                @Html.ValidationMessageFor(model => model.DangNguoi, "", new { @class = "text-danger" })
            </div>*@
    </div>
</div>
<div class="row">
    <div class="table-responsive">
        <table class="table table-dark">
            <tr>
                @{
                    var index = 0;
                    foreach (var productType in listProductType)
                    {
                        <td>
                            <div class="table-responsive mt10">
                                <table class="table table-dark">
                                    <thead>
                                        <tr>
                                            <th colspan="2">
                                                @productType.Name
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (productType.ProductTyeField.Any())
                                        {
                                            foreach (var productTypeField in productType.ProductTyeField.ToArray())
                                            {
                                                var productTypeValue = Model.ProductTypeValue.FirstOrDefault(m => m.ProductTypeFieldId == productTypeField.Id);
                                                <tr>
                                                    <td>@productTypeField.Name</td>
                                                    <td>
                                                        <input type="hidden" name="ProductTypeValue[@index].ProductTypeFieldId" value="@productTypeField.Id" />
                                                        <input type="text" name="ProductTypeValue[@index].Value" value="@(productTypeValue != null ? productTypeValue.Value : "")" class="form-control" />
                                                    </td>
                                                </tr>
                                                index = index + 1;
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </td>
                    }
                }
            </tr>
        </table>
    </div>
</div>