@using iClassic.Helper;
@using iClassic.Models;
@model Customer

@{
    var listProductType = (ViewBag.ProductTypeList as IQueryable<ProductType>).ToList();
    var isAjax = (bool)ViewBag.IsAjaxRequest;
}
<div class="row" style="display: @(!isAjax || Model.Id == 0? "block": "none")">
    <div class="col-md-12">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.BranchId)
        <div class="form-group">
            @Html.LabelFor(model => model.TenKH)
            @Html.EditorFor(model => model.TenKH, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TenKH, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SDT)
            @Html.EditorFor(model => model.SDT, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SDT, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Address)
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Group)
            <select name="Group" class="form-control">
                @foreach (var item in Constant.CustomerGroup)
                {
                    <option value="@item.Key" @(item.Key == Model.Group ? "selected" : "")>@item.Value</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.Group, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.KenhQC)
            <select name="KenhQC" class="form-control">
                @foreach (var item in Constant.ListKenhQuangCao)
                {
                    <option value="@item.Key" @(item.Key == Model.KenhQC ? "selected" : "")>@item.Value</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.KenhQC, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="row" style="display: @(!isAjax || Model.Id > 0? "block": "none")">

    @{
        var index = 0;
        <ul class="nav nav-tabs nav-justified">
            @foreach (var productType in listProductType)
            {
                var active = productType.Id == listProductType.ElementAt(0).Id ? "active" : "";
                <li class="@active"><a href="#Tab@(productType.Id)" data-toggle="tab"><strong>@productType.Name</strong></a></li>
            }
        </ul>
        <div class="tab-content">
            @foreach (var productType in listProductType)
            {
                var active = productType.Id == listProductType.ElementAt(0).Id ? "active" : "";
                <div class="tab-pane @active" id="Tab@(productType.Id)">
                    <div class="row">
                        @if (productType.ProductTyeField.Any())
                        {
                            foreach (var productTypeField in productType.ProductTyeField.ToArray())
                            {
                                var productTypeValue = Model.ProductTypeValue.FirstOrDefault(m => m.ProductTypeFieldId == productTypeField.Id);

                                <div class="col-xs-6">
                                    <label>@productTypeField.Name</label>
                                    <div>
                                        <input type="hidden" name="ProductTypeValue[@index].ProductTypeFieldId" value="@productTypeField.Id" />
                                        <input type="text" name="ProductTypeValue[@index].Value" value="@(productTypeValue != null ? productTypeValue.Value : "")" class="form-control" />
                                    </div>
                                </div>
                                index = index + 1;
                            }
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>
