@using iClassic.Models;
@model Customer

@{
    ViewBag.Title = Model.Id > 0 ? "Sửa lại" : "Thêm mới";
    ViewBag.Class = "fa fa-user";
    ViewBag.Breadcrumbs = "<a href='" + Url.Action("Index") + "'>Khách hàng</a>" +
                          "<span>" + ViewBag.Title + "</span>";
    var listProductType = ViewBag.ProductTypeList as IQueryable<ProductType>;
}

<div class="row mb10 mt10">
    <div class="col-md-12">
        <h3 class="panel-title">
            @ViewBag.Title
        </h3>
    </div>
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="panel panel-default">
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    <div class="form-group">
                        @Html.LabelFor(model => model.BranchId)
                        @Html.DropDownList("BranchId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.TenKH)
                        @Html.EditorFor(model => model.TenKH, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TenKH, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SDT)
                        @Html.EditorFor(model => model.SDT, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SDT, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Address)
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                    @*<div class="form-group">
                        <label>Ảnh đại diện</label>
                        <input type="file" name="fileImage" accept="image/*" class="form-control file" data-show-preview="false" data-show-upload="false" />
                    </div>*@
                    <div class="form-group">
                        @Html.LabelFor(model => model.KenhQC)
                        @Html.EditorFor(model => model.KenhQC, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.KenhQC, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Note)
                        @Html.TextAreaFor(model => model.Note, new { @class = "form-control", rows = "5" })
                        @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row">
                @{
                    var index = 0;
                    var column = 12 / listProductType.Count();
                    foreach (var productType in listProductType)
                    {
                        <div class="col-sm-@column col-xs-6">
                            <div class="table-responsive mt10">
                                <table class="table table-dark">
                                    <thead>
                                        <tr>
                                            <th colspan="2">
                                                @productType.Name
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (productType.ProductTyeField.Any())
                                        {
                                            foreach (var productTypeField in productType.ProductTyeField.ToArray())
                                            {
                                                var productTypeValue = Model.ProductTypeValue.FirstOrDefault(m => m.ProductTypeFieldId == productTypeField.Id);
                                                <tr>
                                                    <td>@productTypeField.Name</td>
                                                    <td>
                                                        <input type="hidden" name="ProductTypeValue[@index].ProductTypeFieldId" value="@productTypeField.Id" />
                                                        <input type="text" name="ProductTypeValue[@index].Value" value="@(productTypeValue != null ? productTypeValue.Value : "")" class="form-control" />
                                                    </td>
                                                </tr>
                                                index = index + 1;
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>
    </div>
    <button class="btn btn-lightblue" type="submit">Lưu</button>
    <a href="@Url.Action("Index")" class="btn btn-default">Quay lại</a>
                    }

@section Styles{
    <link href="@Url.Content("~/Content/fileinput.min.css")" rel="stylesheet" />
    <style>
        .table > tbody > tr > td {
            padding: 2px 0 0 2px;
        }
    </style>

}
@section scripts{
    <script src="@Url.Content("~/Scripts/fileinput.min.js")"></script>
    @Scripts.Render("~/bundles/jqueryval")
}
