@using iClassic.Helper;
@using iClassic.Models;
@model iClassic.Models.Salary

@{
    ViewBag.Title = Model.Id > 0 ? (!Model.IsPaid ? "Cập nhật" : "Chi tiết") : "Thêm mới";
    ViewBag.Class = "fa fa-user";
    ViewBag.Breadcrumbs = "<a href='" + Url.Action("Index") + "'>Tiền lương</a>" +
                          "<span>" + ViewBag.Title + "</span>";
    var listUsers = ViewBag.EmployeeId as IQueryable<AspNetUsers>;
}

<div class="row mb10 mt10">
    <div class="col-md-12">
        <h3 class="panel-title">
            @ViewBag.Title
        </h3>
    </div>
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="panel panel-default">
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    <div class="form-group">
                        <label>Tiêu đề</label>
                        @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                    </div>
                    <div class="row mb10">
                        <div class="col-md-12">
                            <label>Đối tượng</label>
                        </div>
                        <div class="col-xs-6">
                            <div class="form-group">
                                <select name="type" id="objectType" class="form-control">
                                    <option value="1" @(Model.WorkerId.HasValue ? "" : "selected")>Nhân viên</option>
                                    <option value="2" @(Model.WorkerId.HasValue ? "selected" : "")>Thợ</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-xs-6">
                            <div class="form-group EmployeeBox">
                                <select class="form-control" id="EmployeeId" name="EmployeeId">
                                    @foreach (var item in listUsers)
                                    {
                                        <option value="@item.Id" data-salary="@(item.Salary ?? 0)">@(item.Name + " (" + item.UserName + ")")</option>
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group WorkerBox">
                                @Html.DropDownList("WorkerId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.WorkerId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row mb10 DateBox">
                        <div class="col-xs-6">
                            <div class="form-group">
                                <label>Từ ngày</label>
                                <input type="text" name="FromDate" id="FromDate" value="@Model.FromDate.ToString("dd/MM/yyyy")" class="form-control datepicker" />
                                @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-xs-6">
                            <div class="form-group">
                                <label>Đến ngày</label>
                                <input type="text" name="ToDate" id="ToDate" value="@Model.ToDate.ToString("dd/MM/yyyy")" class="form-control datepicker" />
                                @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Tổng tiền lương</label>
                        @Html.EditorFor(model => model.TotalSalary, new { htmlAttributes = new { @class = "form-control price", @readonly = "true" } })
                        @Html.ValidationMessageFor(model => model.TotalSalary, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="table-responsive" id="ListSanPham">

    </div>
    if (!Model.IsPaid)
    {
        <button class="btn btn-lightblue" type="submit" onclick="beforeSubmit();">Lưu</button>
    }
    <a href="@Url.Action("Index")" class="btn btn-default">Quay lại</a>
}

@section Styles {
    <link href="@Url.Content("~/Content/bootstrap-datetimepicker.css")" rel="stylesheet" />
}

@section Scripts {
    <script src="@Url.Content("~/Scripts/jquery.maskMoney.min.js")"></script>
    <script src="@Url.Content("~/Scripts/moment.min.js")"></script>
    <script src="@Url.Content("~/Scripts/bootstrap-datetimepicker.min.js")"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function () {
            showHideEmployeeAndWoker();

            $('#objectType').change(function () {
                showHideEmployeeAndWoker();
                getSanPham();
            });

            $('#EmployeeId').change(function () {
                calcSalaryEmployee();
            });

            $("#WorkerId ").change(function () {
                calcSalaryEmployee();
                getSanPham();
            });

            $('#FromDate, #ToDate').on('dp.change', function (e) {
                getSanPham();
            })

            $('.datepicker').datetimepicker({
                format: 'DD/MM/YYYY'
            });

            $('.price').maskMoney({ precision: 0 });
            formatPrices();

            getSanPham();

            if ("@Model.IsPaid" == "True") {
                $("select, input").attr("disabled", "disabled");
            }
        });
        function showHideEmployeeAndWoker() {
            var objectType = parseInt($('#objectType').val());
            if (objectType == 1) {
                // Nhân viên
                $('.EmployeeBox').slideDown();
                $('.WorkerBox,.DateBox').slideUp();
                calcSalaryEmployee();
            } else {
                $('.EmployeeBox').slideUp();
                $('.WorkerBox,.DateBox').slideDown();
            }
        }
        function calcSalaryEmployee() {
            var salary = parseInt($("#EmployeeId option:selected").attr('data-salary')) | 0;
            $("#TotalSalary").val(formatMoney(salary, ''))
        }
        function getSanPham() {
            var objId = $("#objectType").val();
            if (objId != "1") {
                var thoId = parseInt($("#WorkerId").val());
                var startDate = getDateTime($("#FromDate").val());
                var toDate = getDateTime($("#ToDate").val());

                $.get("@Url.Action("GetPhieuSanXuat")"
                    , { thoId: thoId, startDate: startDate, endDate: toDate }
                    , function (data) {
                        $("#ListSanPham").html(data);
                        var tongLuong = $("#TongSoTien").text();
                        $("#TotalSalary").val(tongLuong).focus();
                    });
            }
        }
        function getDateTime(date) {
            if (date) {
                var arr = date.split("/");
                return arr[1] + '/' + arr[0] + '/' + arr[2];
            }
            return "";
        }
        function beforeSubmit() {
            $(".price").each(function () {
                var $this = $(this);
                var value = $this.val().replace(/,/g, '');
                $this.val(value);
            });
        }
    </script>
}
